package etl_action;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import db.DB;

public class ETLAction {
	public static void insertDataToETL() throws ClassNotFoundException{
		Connection conn = DB.getConnection();
		Statement stm = DB.getStatement(conn);
		
		try{
			String sql = "insert into DB2INST1.T_ETL(DIAGRAM_ID,JH,COLLECT_DATETIME,COLLECT_DATE,FAILURE,LOAD_MAX,LOAD_MIN,ELECTRICITY_MAX,ELECTRICITY_MIN,AREA,MIN_THEORE_LOAD,MAX_THEORE_LOAD, STROKE, STROKE_TIMES, POC_LOC_RATE, POC_LOAD_RATE, UP_LOAD_RANGE, UP_LOAD_MIN, UP_LOAD_MAX, LOAD_MAX_ELEC, LOAD_MIN_ELEC, LOAD_DOWN_LIMIT, LOAD_UP_LIMIT, LOAD_RANGE_LIMIT, ELEC_DOWN_LIMIT, ELEC_UP_LIMIT, LIQUID_DEPTH, SINK_DEGREE, MAX_BACK_PRESS, MIN_BACK_PRESS, AVA_BACK_PRESS, MAX_SLEEVE_PRESS, MIN_SLEEVE_PRESS, AVA_SLEEVE_PRESS, MAX_OIL_PRESS, MIN_OIL_PRESS, AVA_OIL_PRESS, MAX_OIL_TEMP, MIN_OIL_TEMP, AVA_OIL_TEMP, MAX_ELEC_A, MIN_ELEC_A, AVA_ELEC_A, DAILY_LIQUID, DAILY_OIL, DAILY_GAS, DAILY_WATER, AVA_WATER, SUM_WATER) ( select T0.DIAGRAM_ID as DIAGRAM_ID, T0.JH as JH, T0.COLLECT_DATETIME as COLLECT_DATETIME, date(T0.COLLECT_DATE) as COLLECT_DATE, T0.FAILURE as FAILURE, T0.LOAD_MAX as LOAD_MAX, T0.LOAD_MIN as LOAD_MIN, T0.ELECTRICITY_MAX as ELECTRICITY_MAX, T0.ELECTRICITY_MIN as ELECTRICITY_MIN, T0.AREA as AREA, T0.MIN_THEORE_LOAD as  MIN_THEORE_LOAD, T0.MAX_THEORE_LOAD as MAX_THEORE_LOAD, T0.STROKE as STROKE, T0.STROKE_TIMES as STROKE_TIMES, T0.POC_LOC_RATE as POC_LOC_RATE, T0.POC_LOAD_RATE as POC_LOAD_RATE, T0.UP_LOAD_RANGE as UP_LOAD_RANGE, T0.UP_LOAD_MIN as UP_LOAD_MIN, T0.UP_LOAD_MAX as UP_LOAD_MAX, T0.LOAD_MAX_ELEC as LOAD_MAX_ELEC, T0.LOAD_MIN_ELEC as LOAD_MIN_ELEC, T0.LOAD_DOWN_LIMIT as LOAD_DOWN_LIMIT, T0.LOAD_UP_LIMIT as LOAD_UP_LIMIT, T0.LOAD_RANGE_LIMIT as LOAD_RANGE_LIMIT, T0.ELEC_DOWN_LIMIT as ELEC_DOWN_LIMIT, T0.ELEC_UP_LIMIT as ELEC_UP_LIMIT, T0.LIQUID_DEPTH as LIQUID_DEPTH, T0.SINK_DEGREE as SINK_DEGREE, T2.P37 as MAX_BACK_PRESS, T2.P38 as MIN_BACK_PRESS, T2.P39 as AVA_BACK_PRESS,  T2.P40 as MAX_SLEEVE_PRESS,  T2.P41 as MIN_SLEEVE_PRESS, T2.P42 as AVA_SLEEVE_PRESS, T2.P43 as MAX_OIL_PRESS, T2.P44 as MIN_OIL_PRESS, T2.P45 as AVA_OIL_PRESS, T2.P46 as MAX_OIL_TEMP, T2.P47 as MIN_OIL_TEMP, T2.P48 as AVA_OIL_TEMP, T2.P49 as MAX_ELEC_A, T2.P50 as MIN_ELEC_A, T2.P51 as AVA_ELEC_A, T2.P64 as DAILY_LIQUID, T2.P65 as DAILY_OIL, T2.P66 as DAILY_GAS, T2.P67 as DAILY_WATER, T2.P76 as AVA_WATER, T2.P77 as SUM_WATER from (select T0.DIAGRAM_ID as DIAGRAM_ID, T1.P02 as JH, T1.P03 as COLLECT_DATETIME, DATE(T1.P03) as COLLECT_DATE, null as FAILURE, T0.LOAD_MAX AS LOAD_MAX, T0.LOAD_MIN AS LOAD_MIN, T0.ELECTRICITY_MAX AS ELECTRICITY_MAX, T0.ELECTRICITY_MIN AS ELECTRICITY_MIN, T0.AREA as AREA, T1.P05 as MIN_THEORE_LOAD, T1.P06 as MAX_THEORE_LOAD, T1.P07 as STROKE, T1.P08 as STROKE_TIMES, T1.P09 as POC_LOC_RATE, T1.P10 as POC_LOAD_RATE, T1.P11 as UP_LOAD_RANGE, T1.P12 as UP_LOAD_MIN, T1.P13 as UP_LOAD_MAX, T1.P14 as LOAD_MAX_ELEC, T1.P15 as LOAD_MIN_ELEC, T1.P16 as LOAD_DOWN_LIMIT, T1.P17 as LOAD_UP_LIMIT, T1.P18 as LOAD_RANGE_LIMIT, T1.P19 as ELEC_DOWN_LIMIT, T1.P20 as ELEC_UP_LIMIT, T1.P21 as LIQUID_DEPTH, T1.P22 as SINK_DEGREE from DB2INST1.T_DBAT2070 T0 left outer join DB2INST1.T_DBAT2071 T1 on (T0.P02=T1.P02 and T0.P03=T1.P03)) T0 left outer join DB2INST1.T_DBAT3001 T2 on (T0.JH=T2.P02 and T0.COLLECT_DATE=DATE(T2.P03)))";	
			DB.executeUpdate(stm,sql);
		} catch (Exception e) {
			e.printStackTrace();
		} finally{
			try{
				stm.close();
				conn.close();
				stm = null;
				conn = null;	
			}catch(SQLException e){
				e.printStackTrace();
			}
		}
	}
	
	public static void main(String[] args){
		try{
			ETLAction.insertDataToETL();
			System.out.println("Success!");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
